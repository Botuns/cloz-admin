generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  PAY_ON_DELIVERY
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(CUSTOMER)
  avatar    String?
  phone     String?
  password  String?  
  isActive  Boolean  @default(true)
  
  // Relations
  orders    Order[]
  reviews   Review[]
  profile   Profile?
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  gender      String?
  address     Json?
  preferences Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Brand {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String?
  logo        String?
  banner      String?
  
  contactEmail String
  contactPhone String?
  website      String?
  
  isActive     Boolean @default(true)
  isFeatured   Boolean @default(false)
  isVerified   Boolean @default(false)
  
  // Settings
  allowPOD     Boolean @default(true)
  commission   Decimal @default(15.0) // Platform commission %
  
  // Relations
  products     Product[]
  
  // Analytics
  totalSales   Decimal @default(0)
  totalOrders  Int     @default(0)
  rating       Decimal @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("brands")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryParent", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryParent")
  
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Relations
  products    Product[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  
  // Pricing
  price       Decimal
  comparePrice Decimal? // Original price for discounts
  costPrice   Decimal? // For profit calculation
  
  // Media
  images      String[] // Array of image URLs
  videos      String[] @default([])
  
  // Inventory
  inventory   Int      @default(0)
  sku         String?  @unique
  barcode     String?
  
  // Status
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isDigital   Boolean  @default(false)
  
  // Settings
  allowPOD    Boolean  @default(true)
  weight      Decimal? // For shipping calculation
  dimensions  Json?    // Length, width, height
  
  // SEO
  metaTitle       String?
  metaDescription String?
  tags            String[] @default([])
  
  // Relations
  brandId     String
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  
  // Analytics
  totalSales  Decimal @default(0)
  totalOrders Int     @default(0)
  viewCount   Int     @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  name      String  // e.g., "Red - Large"
  sku       String? @unique
  price     Decimal?
  inventory Int     @default(0)
  
  // Variant attributes (color, size, etc.)
  attributes Json   // { "color": "red", "size": "large" }
  
  isActive  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variants")
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  
  // Customer
  customerId    String?
  customer      User?         @relation(fields: [customerId], references: [id])
  
  // Guest checkout
  guestEmail    String?
  guestPhone    String?
  
  // Order details
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus String        @default("pending")
  paymentId     String?       // Stripe/Flutterwave payment ID
  
  // Amounts
  subtotal      Decimal
  shippingCost  Decimal       @default(0)
  tax           Decimal       @default(0)
  discount      Decimal       @default(0)
  totalAmount   Decimal
  
  // Addresses
  shippingAddress Json
  billingAddress  Json?
  
  // Fulfillment
  isPaid        Boolean   @default(false)
  isDelivered   Boolean   @default(false)
  deliveredAt   DateTime?
  trackingNumber String?
  
  // Notes
  customerNotes String?
  adminNotes    String?
  
  // Relations
  items         OrderItem[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  variantId   String?
  
  quantity    Int
  price       Decimal // Price at time of order
  total       Decimal // quantity * price
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

model Review {
  id        String  @id @default(cuid())
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
  
  // Guest review
  guestName  String?
  guestEmail String?
  
  rating    Int     // 1-5 stars
  title     String?
  content   String?
  images    String[] @default([])
  
  isVerified Boolean @default(false) // Verified purchase
  isApproved Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Campaign and Marketing
model Campaign {
  id          String   @id @default(cuid())
  name        String
  type        String   // "featured", "sale", "new_arrival"
  
  startDate   DateTime
  endDate     DateTime?
  
  isActive    Boolean  @default(true)
  
  // Settings
  settings    Json     // Campaign-specific settings
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("campaigns")
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  image       String
  
  linkType    String   // "product", "category", "brand", "external"
  linkValue   String   // ID or URL
  
  position    String   // "hero", "sidebar", "footer"
  sortOrder   Int      @default(0)
  
  isActive    Boolean  @default(true)
  
  // Schedule
  startDate   DateTime?
  endDate     DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
